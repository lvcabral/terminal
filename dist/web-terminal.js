/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/WebTerminal.js":
/*!****************************!*\
  !*** ./src/WebTerminal.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global MutationObserver */\n\nvar _modules = __webpack_require__(/*! ./modules */ \"./src/modules/index.js\");\n\nvar _WebTerminal = __webpack_require__(/*! ./WebTerminal.css */ \"./src/WebTerminal.css\");\n\nvar _WebTerminal2 = _interopRequireDefault(_WebTerminal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// eslint-disable-line\n\nvar KEY = \"WebTerm\";\n\nvar _window = window,\n    addEventListener = _window.addEventListener,\n    localStorage = _window.localStorage;\n\nvar Terminal = function () {\n  function Terminal() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Terminal);\n\n    _initialiseProps.call(this);\n\n    var _props$container = props.container,\n        container = _props$container === undefined ? \"web-terminal\" : _props$container,\n        _props$commands = props.commands,\n        commands = _props$commands === undefined ? {} : _props$commands,\n        _props$welcome = props.welcome,\n        welcome = _props$welcome === undefined ? 'Welcome to the simple <a href=\"\">Web Terminal</a>.' : _props$welcome,\n        _props$prompt = props.prompt,\n        prompt = _props$prompt === undefined ? \"\" : _props$prompt,\n        _props$separator = props.separator,\n        separator = _props$separator === undefined ? \"&gt;\" : _props$separator,\n        _props$ignoreBadComma = props.ignoreBadCommand,\n        ignoreBadCommand = _props$ignoreBadComma === undefined ? false : _props$ignoreBadComma,\n        _props$autoFocus = props.autoFocus,\n        autoFocus = _props$autoFocus === undefined ? true : _props$autoFocus,\n        _props$colors = props.colors,\n        contextualColors = _props$colors === undefined ? true : _props$colors,\n        _props$colorTheme = props.colorTheme,\n        colorTheme = _props$colorTheme === undefined ? \"light\" : _props$colorTheme;\n\n    this.commands = Object.assign({}, _modules.COMMANDS, commands);\n    this.history = localStorage[KEY] ? JSON.parse(localStorage[KEY]) : [];\n    this.historyCursor = this.history.length;\n    this.welcome = welcome;\n    this.shell = { prompt: prompt, separator: separator };\n    this.ignoreBadCommand = ignoreBadCommand;\n    this.autoFocus = autoFocus;\n    this.contextualColors = contextualColors;\n    this.colorTheme = colorTheme;\n    this.colors = _modules.colors; // Expose color utility functions\n    this.colorize = _modules.colorize; // Expose colorize function\n\n    var el = document.getElementById(container);\n    if (el) {\n      this.cacheDOM(el);\n      this.addListeners();\n      if (welcome) this.output(welcome);\n    } else throw Error(\"Container #\" + container + \" doesn't exists.\");\n  }\n\n  _createClass(Terminal, [{\n    key: \"clear\",\n    value: function clear() {\n      this.DOM.output.innerHTML = \"\";\n      if (!this.state.idle) {\n        this.DOM.input.focus();\n      }\n      this.resetCommand();\n    }\n  }, {\n    key: \"idle\",\n    value: function idle() {\n      var DOM = this.DOM;\n\n\n      DOM.command.classList.add(\"idle\");\n      DOM.prompt.innerHTML = '<div class=\"spinner\"></div>';\n    }\n  }, {\n    key: \"prompt\",\n    value: function prompt(_prompt) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n      this.state.prompt = true;\n      this.onAskCallback = callback;\n      this.DOM.prompt.innerHTML = _prompt + \":\";\n      this.resetCommand();\n      this.DOM.command.classList.add(\"input\");\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(callback) {\n      this.onInputCallback = callback;\n    }\n\n    // Output raw HTML without any processing (useful for pre-formatted HTML content)\n\n  }, {\n    key: \"outputHTML\",\n    value: function outputHTML() {\n      var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"&nbsp;\";\n\n      this.DOM.output.insertAdjacentHTML(\"beforeEnd\", \"<span>\" + html + \"</span>\");\n      this.scrollDown();\n    }\n  }, {\n    key: \"output\",\n    value: function output() {\n      var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"&nbsp;\";\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var processedHtml = html;\n\n      // Process colors if enabled\n      if (this.contextualColors && typeof html === \"string\") {\n        // Handle specific message types first\n        if (type && [\"error\", \"success\", \"warning\", \"info\"].includes(type)) {\n          processedHtml = (0, _modules.colorizeMessageType)(html, type, this.colorTheme);\n        }\n        // Then apply contextual coloring\n        else {\n            // First process ANSI codes, then contextual coloring\n            processedHtml = (0, _modules.ansiToHtml)(html);\n            if (processedHtml === html) {\n              // Only apply contextual if no ANSI codes were processed\n              processedHtml = (0, _modules.contextualColorize)(processedHtml, this.colorTheme);\n            }\n          }\n      } else if (typeof html === \"string\") {\n        // If colors are disabled, still process ANSI codes to avoid showing raw escape sequences\n        processedHtml = (0, _modules.ansiToHtml)(html);\n        if (processedHtml === html) {\n          // No ANSI codes found, escape HTML to prevent injection\n          processedHtml = html.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        }\n      }\n\n      this.DOM.output.insertAdjacentHTML(\"beforeEnd\", \"<span>\" + processedHtml + \"</span>\");\n      this.resetCommand();\n    }\n\n    // Output JSON with syntax highlighting\n\n  }, {\n    key: \"outputJSON\",\n    value: function outputJSON(obj) {\n      if (!this.contextualColors) {\n        this.output(JSON.stringify(obj, null, 2));\n        return;\n      }\n      this.output((0, _modules.colorizeJSON)(obj, this.colorTheme));\n    }\n\n    // Output command results with contextual coloring\n\n  }, {\n    key: \"outputCommand\",\n    value: function outputCommand(text) {\n      if (!this.contextualColors) {\n        this.output(text);\n        return;\n      }\n      this.output((0, _modules.colorizeCommandOutput)(text, this.colorTheme));\n    }\n  }, {\n    key: \"setPrompt\",\n    value: function setPrompt() {\n      var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.shell.prompt;\n      var DOM = this.DOM,\n          separator = this.shell.separator;\n\n\n      this.shell = { prompt: prompt, separator: separator };\n      DOM.command.classList.remove(\"idle\");\n      DOM.prompt.innerHTML = \"\" + prompt + separator;\n      DOM.input.focus();\n    }\n\n    // Color utility methods\n\n  }, {\n    key: \"colorize\",\n    value: function colorize(text, color, bgColor) {\n      if (!this.contextualColors) return text;\n      return (0, _modules.colorize)(text, color, bgColor);\n    }\n\n    // Convenience methods for message types\n\n  }, {\n    key: \"error\",\n    value: function error(text) {\n      this.output(text, \"error\");\n    }\n  }, {\n    key: \"success\",\n    value: function success(text) {\n      this.output(text, \"success\");\n    }\n  }, {\n    key: \"warning\",\n    value: function warning(text) {\n      this.output(text, \"warning\");\n    }\n  }, {\n    key: \"info\",\n    value: function info(text) {\n      this.output(text, \"info\");\n    }\n\n    // Method to change color theme\n\n  }, {\n    key: \"setColorTheme\",\n    value: function setColorTheme(theme) {\n      if (_modules.COLOR_THEMES[theme]) {\n        var oldTheme = this.colorTheme;\n        var oldColors = _modules.COLOR_THEMES[oldTheme];\n        var newColors = _modules.COLOR_THEMES[theme];\n\n        // Remove old theme class\n        this.DOM.el.classList.remove(\"theme-\" + this.colorTheme);\n\n        // Set new theme\n        this.colorTheme = theme;\n\n        // Add new theme class\n        this.DOM.el.classList.add(\"theme-\" + this.colorTheme);\n\n        // Update all existing inline styles in the output to use new theme colors\n        if (this.contextualColors && oldColors && newColors) {\n          var outputSpans = this.DOM.output.querySelectorAll('span[style*=\"color\"]');\n          outputSpans.forEach(function (span) {\n            var currentStyle = span.getAttribute('style');\n            if (currentStyle) {\n              var updatedStyle = currentStyle;\n\n              // Replace each old theme color with the corresponding new theme color\n              Object.keys(oldColors).forEach(function (colorKey) {\n                var oldColor = oldColors[colorKey];\n                var newColor = newColors[colorKey];\n\n                // Escape special regex characters in the color value (e.g., # in hex colors)\n                var escapedOldColor = oldColor.replace(/[#().]/g, '\\\\$&');\n\n                // Match the color in the style attribute (case-insensitive)\n                var colorRegex = new RegExp(\"color:\\\\s*\" + escapedOldColor, 'gi');\n                updatedStyle = updatedStyle.replace(colorRegex, \"color: \" + newColor);\n              });\n\n              span.setAttribute('style', updatedStyle);\n            }\n          });\n        }\n      }\n    }\n\n    // Method to toggle contextual coloring\n\n  }, {\n    key: \"setContextualColors\",\n    value: function setContextualColors(enable) {\n      this.contextualColors = enable;\n    }\n  }]);\n\n  return Terminal;\n}();\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.state = {\n    prompt: undefined,\n    idle: undefined\n  };\n\n  this.cacheDOM = function (el) {\n    el.classList.add(KEY);\n    el.classList.add(\"theme-\" + _this.colorTheme);\n    el.insertAdjacentHTML(\"beforeEnd\", (0, _modules.markup)(_this));\n\n    // Cache DOM nodes\n    var container = el.querySelector(\".container\");\n    _this.DOM = {\n      container: container,\n      output: container.querySelector(\"output\"),\n      command: container.querySelector(\".command\"),\n      input: container.querySelector(\".command .input\"),\n      prompt: container.querySelector(\".command .prompt\"),\n      el: el // Store reference to main element for theme switching\n    };\n  };\n\n  this.addListeners = function () {\n    var DOM = _this.DOM,\n        autoFocus = _this.autoFocus;\n\n    // Create a MutationObserver to observe changes in the output element\n\n    var observer = new MutationObserver(function () {\n      setTimeout(function () {\n        return DOM.input.scrollIntoView();\n      }, 10);\n    });\n\n    // Start observing the output element for child list changes\n    observer.observe(DOM.output, { childList: true, subtree: true });\n\n    DOM.output.addEventListener(\"click\", function (event) {\n      return event.stopPropagation();\n    }, false);\n    DOM.input.addEventListener(\"keyup\", _this.onKeyUp, false);\n    DOM.input.addEventListener(\"keydown\", _this.onKeyDown, false);\n    DOM.command.addEventListener(\"click\", function () {\n      return DOM.input.focus();\n    }, false);\n\n    if (autoFocus) {\n      addEventListener(\"click\", function () {\n        return DOM.input.focus();\n      }, false);\n\n      addEventListener(\"keyup\", function (event) {\n        DOM.input.focus();\n        event.stopPropagation();\n        event.preventDefault();\n      }, false);\n    }\n  };\n\n  this.onKeyUp = function (event) {\n    var keyCode = event.keyCode;\n    var DOM = _this.DOM,\n        _history = _this.history,\n        history = _history === undefined ? [] : _history,\n        historyCursor = _this.historyCursor;\n\n\n    if (keyCode === 27) {\n      // ESC key\n      DOM.input.value = \"\";\n      event.stopPropagation();\n      event.preventDefault();\n    } else if ([38, 40].includes(keyCode)) {\n      if (keyCode === 38 && historyCursor > 0) _this.historyCursor -= 1; // {38} UP key\n      if (keyCode === 40 && historyCursor < history.length - 1) _this.historyCursor += 1; // {40} DOWN key\n\n      if (history[_this.historyCursor]) DOM.input.value = history[_this.historyCursor];\n    }\n  };\n\n  this.onKeyDown = function (_ref) {\n    var keyCode = _ref.keyCode;\n    var _commands = _this.commands,\n        commands = _commands === undefined ? {} : _commands,\n        DOM = _this.DOM,\n        history = _this.history,\n        onInputCallback = _this.onInputCallback,\n        state = _this.state;\n\n    var commandLine = DOM.input.value.trim();\n    if (keyCode !== 13 || !commandLine) return;\n\n    var _commandLine$split = commandLine.split(\" \"),\n        _commandLine$split2 = _toArray(_commandLine$split),\n        command = _commandLine$split2[0],\n        parameters = _commandLine$split2.slice(1);\n\n    if (state.prompt) {\n      state.prompt = false;\n      _this.onAskCallback(command);\n      _this.setPrompt();\n      _this.resetCommand();\n      return;\n    }\n\n    // Save command line in history\n    history.push(commandLine);\n    localStorage[KEY] = JSON.stringify(history);\n    _this.historyCursor = history.length;\n\n    // Clone command as a new output line\n    DOM.output.appendChild((0, _modules.cloneCommandNode)(DOM.command));\n\n    // Clean command line\n    DOM.command.classList.add(\"hidden\");\n    DOM.input.value = \"\";\n\n    // Dispatch command\n    var handled = false;\n    if (Object.keys(commands).includes(command)) {\n      var callback = commands[command];\n      if (callback) {\n        callback(_this, parameters);\n        handled = true;\n      }\n    } else if (!_this.ignoreBadCommand) {\n      _this.output(\"<u>\" + command + \"</u>: command not found.\");\n    }\n    if (onInputCallback) onInputCallback(command, parameters, handled);\n  };\n\n  this.resetCommand = function () {\n    var DOM = _this.DOM;\n\n\n    DOM.input.value = \"\";\n    DOM.command.classList.remove(\"input\");\n    DOM.command.classList.remove(\"hidden\");\n    if (DOM.input.scrollIntoView) DOM.input.scrollIntoView();\n  };\n};\n\nif (window) window.WebTerminal = Terminal;\n\nexports[\"default\"] = Terminal;\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/WebTerminal.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _WebTerminal = __webpack_require__(/*! ./WebTerminal */ \"./src/WebTerminal.js\");\n\nObject.defineProperty(exports, \"default\", ({\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_WebTerminal).default;\n  }\n}));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/index.js?");

/***/ }),

/***/ "./src/modules/cloneCommandNode.js":
/*!*****************************************!*\
  !*** ./src/modules/cloneCommandNode.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = function (el) {\n  var line = el.cloneNode(true);\n  var input = line.querySelector('.input');\n\n  input.autofocus = false;\n  input.readOnly = true;\n  input.insertAdjacentHTML('beforebegin', '<p>' + input.value + '</p>');\n  input.parentNode.removeChild(input);\n  line.classList.add('line');\n\n  return line;\n};\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/cloneCommandNode.js?");

/***/ }),

/***/ "./src/modules/colors.js":
/*!*******************************!*\
  !*** ./src/modules/colors.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ansiToHtml = ansiToHtml;\nexports.contextualColorize = contextualColorize;\nexports.colorizeMessageType = colorizeMessageType;\nexports.colorizeJSON = colorizeJSON;\nexports.colorizeCommandOutput = colorizeCommandOutput;\nexports.colorize = colorize;\n// Color utility functions for WebTerminal with contextual highlighting\nvar ANSI_COLORS = exports.ANSI_COLORS = {\n  30: 'black',\n  31: 'red',\n  32: 'green',\n  33: 'yellow',\n  34: 'blue',\n  35: 'magenta',\n  36: 'cyan',\n  37: 'white',\n  90: 'bright-black',\n  91: 'bright-red',\n  92: 'bright-green',\n  93: 'bright-yellow',\n  94: 'bright-blue',\n  95: 'bright-magenta',\n  96: 'bright-cyan',\n  97: 'bright-white'\n};\n\n// Color themes for different content types\nvar COLOR_THEMES = exports.COLOR_THEMES = {\n  light: {\n    number: '#b34700', // Darker orange for numbers\n    string: '#1e7e34', // Darker green for strings  \n    boolean: '#a62c1f', // Darker red for booleans\n    null: '#5a6268', // Darker gray for null/undefined\n    url: '#1c5d8a', // Darker blue for URLs\n    path: '#6c2d91', // Darker purple for file paths\n    command: '#d39e00', // Darker orange for commands\n    error: '#c82333', // Darker red for errors\n    success: '#1e7e34', // Darker green for success\n    warning: '#d39e00', // Darker orange for warnings\n    info: '#1c5d8a', // Darker blue for info\n    prompt: '#1a252f', // Very dark gray for prompt\n    punctuation: '#5a6268', // Darker gray for punctuation\n    keyword: '#b34700', // Darker orange for keywords\n    variable: '#6c2d91' // Darker purple for variables\n  },\n\n  dark: {\n    number: '#fd971f', // Bright orange\n    string: '#a6e22e', // Bright green\n    boolean: '#f92672', // Bright pink\n    null: '#75715e', // Dark gray\n    url: '#66d9ef', // Cyan\n    path: '#ae81ff', // Light purple\n    command: '#e6db74', // Light yellow\n    error: '#f92672', // Bright pink\n    success: '#a6e22e', // Bright green\n    warning: '#fd971f', // Bright orange\n    info: '#66d9ef', // Cyan\n    prompt: '#449dff', // Blue\n    punctuation: '#f8f8f2', // Off-white\n    keyword: '#f92672', // Bright pink\n    variable: '#66d9ef' // Cyan\n  }\n};\n\nvar ANSI_BG_COLORS = exports.ANSI_BG_COLORS = {\n  40: 'black',\n  41: 'red',\n  42: 'green',\n  43: 'yellow',\n  44: 'blue',\n  45: 'magenta',\n  46: 'cyan',\n  47: 'white',\n  100: 'bright-black',\n  101: 'bright-red',\n  102: 'bright-green',\n  103: 'bright-yellow',\n  104: 'bright-blue',\n  105: 'bright-magenta',\n  106: 'bright-cyan',\n  107: 'bright-white'\n};\n\nvar ANSI_STYLES = exports.ANSI_STYLES = {\n  1: 'bold',\n  2: 'dim',\n  3: 'italic',\n  4: 'underline',\n  9: 'strikethrough'\n};\n\n/**\n * Convert ANSI escape sequences to HTML with CSS classes\n * @param {string} text - Text containing ANSI escape sequences\n * @returns {string} HTML with CSS classes for styling\n */\nfunction ansiToHtml(text) {\n  if (!text || typeof text !== 'string') return text;\n\n  // Reset code\n  var resetCode = '\\x1b[0m';\n\n  // Split by ANSI escape sequences\n  var ansiRegex = /\\x1b\\[([0-9;]*)m/g;\n  var result = '';\n  var lastIndex = 0;\n  var currentClasses = [];\n\n  var match = void 0;\n  while ((match = ansiRegex.exec(text)) !== null) {\n    // Add text before this escape sequence\n    var textBefore = text.slice(lastIndex, match.index);\n    if (textBefore) {\n      if (currentClasses.length > 0) {\n        result += '<span class=\"' + currentClasses.join(' ') + '\">' + textBefore + '</span>';\n      } else {\n        result += textBefore;\n      }\n    }\n\n    // Parse the ANSI codes\n    var codes = match[1].split(';').map(function (code) {\n      return parseInt(code, 10);\n    }).filter(function (code) {\n      return !isNaN(code);\n    });\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = codes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var code = _step.value;\n\n        if (code === 0) {\n          // Reset all styles\n          currentClasses = [];\n        } else if (ANSI_COLORS[code]) {\n          // Remove any existing color classes\n          currentClasses = currentClasses.filter(function (cls) {\n            return !cls.startsWith('color-');\n          });\n          currentClasses.push('color-' + ANSI_COLORS[code]);\n        } else if (ANSI_BG_COLORS[code]) {\n          // Remove any existing background color classes\n          currentClasses = currentClasses.filter(function (cls) {\n            return !cls.startsWith('bg-');\n          });\n          currentClasses.push('bg-' + ANSI_BG_COLORS[code]);\n        } else if (ANSI_STYLES[code]) {\n          // Add style class if not already present\n          var styleClass = ANSI_STYLES[code];\n          if (!currentClasses.includes(styleClass)) {\n            currentClasses.push(styleClass);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    lastIndex = match.index + match[0].length;\n  }\n\n  // Add remaining text\n  var remainingText = text.slice(lastIndex);\n  if (remainingText) {\n    if (currentClasses.length > 0) {\n      result += '<span class=\"' + currentClasses.join(' ') + '\">' + remainingText + '</span>';\n    } else {\n      result += remainingText;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Simple color utility functions for easy use\n */\nvar colors = exports.colors = {\n  black: function black(text) {\n    return '\\x1B[30m' + text + '\\x1B[0m';\n  },\n  red: function red(text) {\n    return '\\x1B[31m' + text + '\\x1B[0m';\n  },\n  green: function green(text) {\n    return '\\x1B[32m' + text + '\\x1B[0m';\n  },\n  yellow: function yellow(text) {\n    return '\\x1B[33m' + text + '\\x1B[0m';\n  },\n  blue: function blue(text) {\n    return '\\x1B[34m' + text + '\\x1B[0m';\n  },\n  magenta: function magenta(text) {\n    return '\\x1B[35m' + text + '\\x1B[0m';\n  },\n  cyan: function cyan(text) {\n    return '\\x1B[36m' + text + '\\x1B[0m';\n  },\n  white: function white(text) {\n    return '\\x1B[37m' + text + '\\x1B[0m';\n  },\n\n  // Bright colors\n  brightBlack: function brightBlack(text) {\n    return '\\x1B[90m' + text + '\\x1B[0m';\n  },\n  brightRed: function brightRed(text) {\n    return '\\x1B[91m' + text + '\\x1B[0m';\n  },\n  brightGreen: function brightGreen(text) {\n    return '\\x1B[92m' + text + '\\x1B[0m';\n  },\n  brightYellow: function brightYellow(text) {\n    return '\\x1B[93m' + text + '\\x1B[0m';\n  },\n  brightBlue: function brightBlue(text) {\n    return '\\x1B[94m' + text + '\\x1B[0m';\n  },\n  brightMagenta: function brightMagenta(text) {\n    return '\\x1B[95m' + text + '\\x1B[0m';\n  },\n  brightCyan: function brightCyan(text) {\n    return '\\x1B[96m' + text + '\\x1B[0m';\n  },\n  brightWhite: function brightWhite(text) {\n    return '\\x1B[97m' + text + '\\x1B[0m';\n  },\n\n  // Styles\n  bold: function bold(text) {\n    return '\\x1B[1m' + text + '\\x1B[0m';\n  },\n  dim: function dim(text) {\n    return '\\x1B[2m' + text + '\\x1B[0m';\n  },\n  italic: function italic(text) {\n    return '\\x1B[3m' + text + '\\x1B[0m';\n  },\n  underline: function underline(text) {\n    return '\\x1B[4m' + text + '\\x1B[0m';\n  },\n  strikethrough: function strikethrough(text) {\n    return '\\x1B[9m' + text + '\\x1B[0m';\n  }\n};\n\n/**\n * Contextually colorize content based on its type and context\n * @param {string} text - Text to colorize\n * @param {string} theme - Color theme to use ('light' or 'dark')\n * @returns {string} HTML with colored spans\n */\nfunction contextualColorize(text) {\n  var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'light';\n\n  if (!text || typeof text !== 'string') return text;\n\n  // Skip colorizing if text already contains HTML tags\n  if (/<[^>]*>/g.test(text)) {\n    return text;\n  }\n\n  var colors = COLOR_THEMES[theme] || COLOR_THEMES.light;\n\n  // Patterns for different content types\n  var patterns = [\n  // URLs (must come before file paths)\n  {\n    regex: /(https?:\\/\\/[^\\s<>\"{}|\\\\^`[\\]]+)/g,\n    color: colors.url,\n    type: 'url'\n  },\n\n  // File paths (Unix and Windows)\n  {\n    regex: /([~/]?(?:[a-zA-Z]:)?[/\\\\]?(?:[^/\\\\:\\s<>\"*?|]+[/\\\\])*[^/\\\\:\\s<>\"*?|]*\\.[a-zA-Z0-9]+)/g,\n    color: colors.path,\n    type: 'path'\n  },\n\n  // Numbers (integers, floats, hex, binary)\n  {\n    regex: /\\b(?:0x[0-9a-fA-F]+|0b[01]+|[+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\b/g,\n    color: colors.number,\n    type: 'number'\n  },\n\n  // Quoted strings (single and double quotes)\n  {\n    regex: /(['\"])((?:\\\\.|(?!\\1)[^\\\\])*?)\\1/g,\n    color: colors.string,\n    type: 'string',\n    keepQuotes: true\n  },\n\n  // Boolean values (be more selective to avoid conflicts with status messages)\n  {\n    regex: /\\b(true|false|yes|no)\\b(?!\\s*(are|is|was|were|currently))/gi,\n    color: colors.boolean,\n    type: 'boolean'\n  },\n\n  // Config/status values (only when they appear standalone or in specific contexts)\n  {\n    regex: /(?:=\\s*|:\\s*|\\btoggle\\s+|\\bset\\s+to\\s+)(enabled?|disabled?|on|off)\\b/gi,\n    color: colors.boolean,\n    type: 'boolean'\n  },\n\n  // Null/undefined values\n  {\n    regex: /\\b(null|undefined|nil|none|empty)\\b/gi,\n    color: colors.null,\n    type: 'null'\n  },\n\n  // Common keywords\n  {\n    regex: /\\b(function|var|let|const|if|else|for|while|return|class|extends|import|export|from|default)\\b/g,\n    color: colors.keyword,\n    type: 'keyword'\n  },\n\n  // Command-like patterns (starting with common commands)\n  {\n    regex: /\\b(ls|cd|pwd|mkdir|rm|cp|mv|cat|grep|find|git|npm|yarn|node|python|java|gcc|make|curl|wget)\\b/g,\n    color: colors.command,\n    type: 'command'\n  },\n\n  // JSON-like object notation\n  {\n    regex: /([{}\\[\\]])/g,\n    color: colors.punctuation,\n    type: 'punctuation'\n  },\n\n  // Variables (dollar sign prefix or camelCase/snake_case identifiers)\n  {\n    regex: /(\\$[a-zA-Z_][a-zA-Z0-9_]*|\\b[a-zA-Z_][a-zA-Z0-9_]*(?=[.\\[\\(])|[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*[:=]))/g,\n    color: colors.variable,\n    type: 'variable'\n  }];\n\n  var result = text;\n  var replacements = [];\n\n  // Find all matches and store them with their positions\n  patterns.forEach(function (pattern) {\n    var match = void 0;\n    var regex = new RegExp(pattern.regex.source, pattern.regex.flags);\n\n    while ((match = regex.exec(text)) !== null) {\n      replacements.push({\n        start: match.index,\n        end: match.index + match[0].length,\n        original: match[0],\n        replacement: '<span style=\"color: ' + pattern.color + '\">' + match[0] + '</span>',\n        type: pattern.type,\n        priority: getPriority(pattern.type)\n      });\n    }\n  });\n\n  // Sort replacements by start position, then by priority (higher priority first)\n  replacements.sort(function (a, b) {\n    if (a.start !== b.start) return a.start - b.start;\n    return b.priority - a.priority;\n  });\n\n  // Remove overlapping replacements (keep higher priority ones)\n  var validReplacements = [];\n  var lastEnd = 0;\n\n  replacements.forEach(function (replacement) {\n    if (replacement.start >= lastEnd) {\n      validReplacements.push(replacement);\n      lastEnd = replacement.end;\n    }\n  });\n\n  // Apply replacements from end to start to avoid index shifting\n  validReplacements.reverse().forEach(function (replacement) {\n    result = result.slice(0, replacement.start) + replacement.replacement + result.slice(replacement.end);\n  });\n\n  return result;\n}\n\n/**\n * Get priority for pattern types (higher numbers = higher priority)\n */\nfunction getPriority(type) {\n  var priorities = {\n    'url': 10,\n    'string': 9,\n    'number': 8,\n    'path': 7,\n    'boolean': 6,\n    'null': 5,\n    'keyword': 4,\n    'command': 3,\n    'variable': 2,\n    'punctuation': 1\n  };\n  return priorities[type] || 0;\n}\n\n/**\n * Colorize specific message types (error, success, warning, info)\n * @param {string} text - Text to colorize\n * @param {string} type - Message type ('error', 'success', 'warning', 'info')\n * @param {string} theme - Color theme to use\n * @returns {string} Colored HTML\n */\nfunction colorizeMessageType(text, type) {\n  var theme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'light';\n\n  var colors = COLOR_THEMES[theme] || COLOR_THEMES.light;\n  var color = colors[type] || colors.info;\n\n  // Add icon based on type\n  var icons = {\n    error: '❌',\n    success: '✅',\n    warning: '⚠️',\n    info: 'ℹ️'\n  };\n\n  var icon = icons[type] || '';\n  return '<span style=\"color: ' + color + '\">' + icon + ' ' + text + '</span>';\n}\n\n/**\n * Colorize JSON output\n * @param {object|string} obj - Object to colorize or JSON string\n * @param {string} theme - Color theme to use\n * @returns {string} Colored JSON HTML\n */\nfunction colorizeJSON(obj) {\n  var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'light';\n\n  var colors = COLOR_THEMES[theme] || COLOR_THEMES.light;\n\n  var jsonString = void 0;\n  if (typeof obj === 'string') {\n    try {\n      // Validate and reformat JSON\n      jsonString = JSON.stringify(JSON.parse(obj), null, 2);\n    } catch (e) {\n      jsonString = obj;\n    }\n  } else {\n    jsonString = JSON.stringify(obj, null, 2);\n  }\n\n  return jsonString.replace(/(\".*?\")\\s*:/g, '<span style=\"color: ' + colors.variable + '\">$1</span>:') // Keys\n  .replace(/:\\s*(\".*?\")/g, ': <span style=\"color: ' + colors.string + '\">$1</span>') // String values\n  .replace(/:\\s*(\\d+\\.?\\d*)/g, ': <span style=\"color: ' + colors.number + '\">$1</span>') // Numbers\n  .replace(/:\\s*(true|false)/g, ': <span style=\"color: ' + colors.boolean + '\">$1</span>') // Booleans\n  .replace(/:\\s*(null)/g, ': <span style=\"color: ' + colors.null + '\">$1</span>') // Null\n  .replace(/([{}\\[\\],])/g, '<span style=\"color: ' + colors.punctuation + '\">$1</span>'); // Punctuation\n}\n\n/**\n * Colorize command line output (like ls, ps, etc.)\n * @param {string} text - Command output\n * @param {string} theme - Color theme to use\n * @returns {string} Colored HTML\n */\nfunction colorizeCommandOutput(text) {\n  var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'light';\n\n  var colors = COLOR_THEMES[theme] || COLOR_THEMES.light;\n\n  return text\n  // File permissions (like drwxr-xr-x)\n  .replace(/^([d-])([rwx-]{9})/gm, '<span style=\"color: ' + colors.variable + '\">$1$2</span>')\n  // File sizes\n  .replace(/\\b(\\d+(?:\\.\\d+)?[KMGT]?B?)\\b/g, '<span style=\"color: ' + colors.number + '\">$1</span>')\n  // Dates and times\n  .replace(/\\b(\\d{1,2}:\\d{2}(?::\\d{2})?|\\d{4}-\\d{2}-\\d{2}|\\w{3}\\s+\\d{1,2}\\s+\\d{1,2}:\\d{2})\\b/g, '<span style=\"color: ' + colors.info + '\">$1</span>')\n  // Executable files (common extensions)\n  .replace(/\\b([^\\s]+\\.(exe|bin|sh|py|js|jar|app))\\b/g, '<span style=\"color: ' + colors.command + '\">$1</span>')\n  // Directories (words ending with /)\n  .replace(/\\b([^\\s]+\\/)\\s/g, '<span style=\"color: ' + colors.path + '\">$1</span> ');\n}\n\n/**\n * Create colored output with hex colors\n * @param {string} text - Text to color\n * @param {string} color - Hex color (e.g., '#ff0000' or 'red')\n * @param {string} bgColor - Background hex color (optional)\n * @returns {string} HTML with inline styles\n */\nfunction colorize(text, color, bgColor) {\n  var styles = [];\n  if (color) styles.push('color: ' + color);\n  if (bgColor) styles.push('background-color: ' + bgColor);\n\n  if (styles.length > 0) {\n    return '<span style=\"' + styles.join('; ') + '\">' + text + '</span>';\n  }\n  return text;\n}\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/colors.js?");

/***/ }),

/***/ "./src/modules/commands.js":
/*!*********************************!*\
  !*** ./src/modules/commands.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _package = __webpack_require__(/*! ../../package.json */ \"./package.json\");\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _help = __webpack_require__(/*! ./help */ \"./src/modules/help.js\");\n\nvar _help2 = _interopRequireDefault(_help);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _window = window,\n    localStorage = _window.localStorage;\n\nvar KEY = 'WebTerm';\n\nexports[\"default\"] = {\n  clear: function clear(terminal) {\n    return terminal.clear();\n  },\n\n  help: function help(terminal, _ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        command = _ref2[0];\n\n    if (command) {\n      terminal.output('help: ' + (_help2.default[command] || 'no help topics match <u>' + command + '</u>'));\n    } else {\n      terminal.output('These shell commands are defined internally. Type <u>help</u> for see the list.');\n      terminal.output('Type <u>help name</u> to find out more about the function <u>name</u>.');\n      terminal.output(Object.keys(terminal.commands).join(', '));\n    }\n  },\n\n  version: function version(terminal) {\n    return terminal.output('Simple Web Terminal v' + _package2.default.version);\n  },\n\n  wipe: function wipe(terminal) {\n    terminal.prompt('Are you sure remove all your commands history? Y/N', function (value) {\n      if (value.trim().toUpperCase() === 'Y') {\n        localStorage.removeItem(KEY);\n        terminal.history = []; // eslint-disable-line\n        terminal.historyCursor = 0; // eslint-disable-line\n        terminal.output('History of commands wiped.');\n      }\n    });\n  },\n\n  colors: function colors(terminal, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        action = _ref4[0];\n\n    if (action === 'off') {\n      terminal.setContextualColors(false);\n      terminal.output('Colors disabled.');\n    } else if (action === 'on') {\n      terminal.setContextualColors(true);\n      terminal.output('Colors enabled.');\n    } else if (action === 'demo') {\n      if (!terminal.contextualColors) {\n        terminal.error('Colors are disabled. Use \"colors on\" to enable them first.');\n        return;\n      }\n\n      terminal.info('=== Color Demonstration ===');\n\n      // Contextual coloring examples\n      terminal.output('Numbers: 42, 3.14, 0xFF, 0b1010');\n      terminal.output('Strings: \"hello world\", \\'single quotes\\'');\n      terminal.output('Booleans: true, false, yes, no');\n      terminal.output('Null values: null, undefined, nil, none');\n      terminal.output('URLs: https://github.com/user/repo');\n      terminal.output('File paths: /home/user/documents/file.txt, ./src/index.js');\n      terminal.output('Commands: ls -la, git status, npm install');\n      terminal.output('Variables: $HOME, $PATH, userName, configFile');\n\n      // JSON example\n      terminal.output('\\nJSON output:');\n      terminal.outputJSON({\n        name: \"WebTerminal\",\n        version: \"1.0.0\",\n        features: [\"colors\", \"themes\"],\n        enabled: true,\n        settings: {\n          theme: \"light\",\n          autoComplete: false\n        }\n      });\n\n      // Message types\n      terminal.output('\\nMessage types:');\n      terminal.error('This is an error message');\n      terminal.warning('This is a warning message');\n      terminal.success('This is a success message');\n      terminal.info('This is an info message');\n    } else {\n      terminal.output('Colors are currently ' + (terminal.contextualColors ? 'enabled' : 'disabled'));\n      terminal.output('Current theme: ' + terminal.colorTheme);\n      terminal.output('');\n      terminal.output('Usage: colors [command]');\n      terminal.output('Commands:');\n      terminal.output('  on     - Enable colored output');\n      terminal.output('  off    - Disable colored output');\n      terminal.output('  demo   - Show color examples');\n      terminal.output('');\n      terminal.output('Use \"theme\" command to change themes');\n      terminal.output('Try demo files for more examples (ls, json, env, ps)');\n    }\n  },\n\n  theme: function theme(terminal, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        themeName = _ref6[0];\n\n    if (!themeName) {\n      terminal.output('Current theme: ' + terminal.colorTheme);\n      terminal.output('Available themes: light, dark');\n      terminal.output('Usage: theme <name>');\n    } else if (['light', 'dark'].includes(themeName)) {\n      terminal.setColorTheme(themeName);\n      terminal.success('Theme changed to: ' + themeName);\n    } else {\n      terminal.error('Unknown theme: ' + themeName);\n      terminal.output('Available themes: light, dark');\n    }\n  }\n};\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/commands.js?");

/***/ }),

/***/ "./src/modules/help.js":
/*!*****************************!*\
  !*** ./src/modules/help.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = {\n  clear: 'clear the terminal screen',\n  version: 'print the terminal version',\n  wipe: 'Remove all your history of command lines',\n  colors: 'control colored output (on|off|demo)',\n  theme: 'change color theme (light|dark)'\n};\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/help.js?");

/***/ }),

/***/ "./src/modules/index.js":
/*!******************************!*\
  !*** ./src/modules/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.COLOR_THEMES = exports.colorizeCommandOutput = exports.colorizeJSON = exports.colorizeMessageType = exports.contextualColorize = exports.colorize = exports.colors = exports.ansiToHtml = exports.markup = exports.COMMANDS = exports.cloneCommandNode = undefined;\n\nvar _cloneCommandNode = __webpack_require__(/*! ./cloneCommandNode */ \"./src/modules/cloneCommandNode.js\");\n\nvar _cloneCommandNode2 = _interopRequireDefault(_cloneCommandNode);\n\nvar _commands = __webpack_require__(/*! ./commands */ \"./src/modules/commands.js\");\n\nvar _commands2 = _interopRequireDefault(_commands);\n\nvar _markup = __webpack_require__(/*! ./markup */ \"./src/modules/markup.js\");\n\nvar _markup2 = _interopRequireDefault(_markup);\n\nvar _colors = __webpack_require__(/*! ./colors */ \"./src/modules/colors.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.cloneCommandNode = _cloneCommandNode2.default;\nexports.COMMANDS = _commands2.default;\nexports.markup = _markup2.default;\nexports.ansiToHtml = _colors.ansiToHtml;\nexports.colors = _colors.colors;\nexports.colorize = _colors.colorize;\nexports.contextualColorize = _colors.contextualColorize;\nexports.colorizeMessageType = _colors.colorizeMessageType;\nexports.colorizeJSON = _colors.colorizeJSON;\nexports.colorizeCommandOutput = _colors.colorizeCommandOutput;\nexports.COLOR_THEMES = _colors.COLOR_THEMES;\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/index.js?");

/***/ }),

/***/ "./src/modules/markup.js":
/*!*******************************!*\
  !*** ./src/modules/markup.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = function (_ref) {\n  var _ref$shell = _ref.shell,\n      prompt = _ref$shell.prompt,\n      separator = _ref$shell.separator;\n  return \"\\n  <div class=\\\"container\\\">\\n    <output></output>\\n    <div class=\\\"command\\\">\\n      <div class=\\\"prompt\\\">\" + prompt + separator + \"</div>\\n      <input class=\\\"input\\\" spellcheck=\\\"false\\\" autofocus />\\n    </table>\\n  </div>\\n\";\n};\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/modules/markup.js?");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./src/WebTerminal.css":
/*!****************************************************************!*\
  !*** ./node_modules/css-loader/index.js!./src/WebTerminal.css ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\n  box-sizing: border-box;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n/* ANSI Color Classes - Theme-aware colors for better visibility */\\n\\n/* Dark theme ANSI colors (default) */\\n.WebTerm output .color-black { color: #2c3e50 !important; }\\n.WebTerm output .color-red { color: #e74c3c !important; }\\n.WebTerm output .color-green { color: #2ecc71 !important; }\\n.WebTerm output .color-yellow { color: #f1c40f !important; }\\n.WebTerm output .color-blue { color: #3498db !important; }\\n.WebTerm output .color-magenta { color: #9b59b6 !important; }\\n.WebTerm output .color-cyan { color: #1abc9c !important; }\\n.WebTerm output .color-white { color: #ecf0f1 !important; }\\n.WebTerm output .color-bright-black { color: #7f8c8d !important; }\\n.WebTerm output .color-bright-red { color: #ff6b6b !important; }\\n.WebTerm output .color-bright-green { color: #51cf66 !important; }\\n.WebTerm output .color-bright-yellow { color: #ffd93d !important; }\\n.WebTerm output .color-bright-blue { color: #74c0fc !important; }\\n.WebTerm output .color-bright-magenta { color: #da77f2 !important; }\\n.WebTerm output .color-bright-cyan { color: #3bc9db !important; }\\n.WebTerm output .color-bright-white { color: #ffffff !important; }\\n\\n/* Light theme ANSI colors - darker, more readable on light background */\\n.WebTerm.theme-light output .color-black { color: #1a252f !important; }\\n.WebTerm.theme-light output .color-red { color: #a62c1f !important; }\\n.WebTerm.theme-light output .color-green { color: #1e7e34 !important; }\\n.WebTerm.theme-light output .color-yellow { color: #b87503 !important; }\\n.WebTerm.theme-light output .color-blue { color: #1c5d8a !important; }\\n.WebTerm.theme-light output .color-magenta { color: #6c2d91 !important; }\\n.WebTerm.theme-light output .color-cyan { color: #117a8b !important; }\\n.WebTerm.theme-light output .color-white { color: #d0d0d0 !important; }\\n.WebTerm.theme-light output .color-bright-black { color: #495057 !important; }\\n.WebTerm.theme-light output .color-bright-red { color: #bd2130 !important; }\\n.WebTerm.theme-light output .color-bright-green { color: #1e7e34 !important; }\\n.WebTerm.theme-light output .color-bright-yellow { color: #d39e00 !important; }\\n.WebTerm.theme-light output .color-bright-blue { color: #0056b3 !important; }\\n.WebTerm.theme-light output .color-bright-magenta { color: #5a32a3 !important; }\\n.WebTerm.theme-light output .color-bright-cyan { color: #138496 !important; }\\n.WebTerm.theme-light output .color-bright-white { color: #e9ecef !important; }\\n\\n.WebTerm {\\n  font-family: \\\"Inconsolata\\\", \\\"Courier New\\\", Courier, monospace;\\n  overflow: hidden;\\n  padding: 0.75em 1em;\\n}\\n\\n/* Default dark theme */\\n.WebTerm, .WebTerm.theme-dark {\\n  background-color: #222222;\\n  color: white;\\n}\\n\\n.WebTerm.theme-dark .container ::selection {\\n  background-color: #1e496c;\\n  text-shadow: none !important;\\n}\\n\\n.WebTerm.theme-dark output span {\\n  color: #dddddd;\\n}\\n\\n/* Light theme */\\n.WebTerm.theme-light {\\n  background-color: #f8f9fa;\\n  color: #1a252f;\\n}\\n\\n.WebTerm.theme-light .container ::selection {\\n  background-color: #bde4ff;\\n  text-shadow: none !important;\\n}\\n\\n.WebTerm.theme-light output span:not([class*=\\\"color-\\\"]):not([class*=\\\"bg-\\\"]) {\\n  color: #1a252f;\\n}\\n\\n.WebTerm .container {\\n  width: 100%;\\n  height: 100%;\\n  overflow-y: scroll;\\n}\\n\\n/* Scrollbar styling for WebKit browsers (Chrome, Safari, Edge) */\\n.WebTerm .container::-webkit-scrollbar {\\n  width: 12px;\\n}\\n\\n/* Dark theme scrollbar (default) */\\n.WebTerm .container::-webkit-scrollbar-track,\\n.WebTerm.theme-dark .container::-webkit-scrollbar-track {\\n  background: #1a1a1a;\\n  border-radius: 6px;\\n}\\n\\n.WebTerm .container::-webkit-scrollbar-thumb,\\n.WebTerm.theme-dark .container::-webkit-scrollbar-thumb {\\n  background: #444444;\\n  border-radius: 6px;\\n  border: 2px solid #1a1a1a;\\n}\\n\\n.WebTerm .container::-webkit-scrollbar-thumb:hover,\\n.WebTerm.theme-dark .container::-webkit-scrollbar-thumb:hover {\\n  background: #555555;\\n}\\n\\n/* Light theme scrollbar */\\n.WebTerm.theme-light .container::-webkit-scrollbar-track {\\n  background: #f1f1f1;\\n  border-radius: 6px;\\n}\\n\\n.WebTerm.theme-light .container::-webkit-scrollbar-thumb {\\n  background: #c1c1c1;\\n  border-radius: 6px;\\n  border: 2px solid #f1f1f1;\\n}\\n\\n.WebTerm.theme-light .container::-webkit-scrollbar-thumb:hover {\\n  background: #a8a8a8;\\n}\\n\\n/* Firefox scrollbar styling */\\n.WebTerm .container {\\n  scrollbar-width: thin;\\n}\\n\\n.WebTerm .container,\\n.WebTerm.theme-dark .container {\\n  scrollbar-color: #444444 #1a1a1a;\\n}\\n\\n.WebTerm.theme-light .container {\\n  scrollbar-color: #c1c1c1 #f1f1f1;\\n}\\n.WebTerm output {\\n  clear: both;\\n  line-height: 1.25em;\\n  width: 100%;\\n}\\n.WebTerm output pre {\\n  white-space: pre-wrap;\\n  white-space: -moz-pre-wrap;\\n  white-space: -pre-wrap;\\n  white-space: -o-pre-wrap;\\n  word-wrap: break-word;\\n  margin: 0;\\n}\\n.WebTerm output span {\\n  display: block;\\n  font-weight: normal;\\n}\\n.WebTerm output span span {\\n  display: inline;\\n}\\n\\n/* Ensure colored spans don't break lines unnecessarily */\\n.WebTerm span[style*=\\\"color\\\"] {\\n  display: inline;\\n}\\n\\n.WebTerm .prompt,\\n.WebTerm a {\\n  font-weight: bold;\\n}\\n\\n/* Theme-specific prompt colors */\\n.WebTerm.theme-light .prompt,\\n.WebTerm.theme-light a {\\n  color: #1a252f;\\n}\\n\\n.WebTerm.theme-dark .prompt,\\n.WebTerm.theme-dark a,\\n.WebTerm .prompt,  /* Default fallback */\\n.WebTerm a {\\n  color: #449dff;\\n}\\n\\n.WebTerm .prompt {\\n  line-height: 1.25em;\\n  margin-right: 0.5em;\\n  margin-top: 0.36em;\\n}\\n\\n.WebTerm .command {\\n  display: flex;\\n}\\n\\n.WebTerm .command p {\\n  margin-top: 0.36em;\\n}\\n\\n.WebTerm .command.input .prompt {\\n  font-weight: normal;\\n}\\n\\n/* Theme-specific input prompt colors */\\n.WebTerm.theme-light .command.input .prompt {\\n  color: #2c3e50;\\n}\\n\\n.WebTerm.theme-dark .command.input .prompt,\\n.WebTerm .command.input .prompt {  /* Default fallback */\\n  color: white;\\n}\\n\\n.WebTerm .command.idle .input {\\n  display: none;\\n}\\n\\n.WebTerm .command.hidden .prompt {\\n  display: none;\\n}\\n\\n.WebTerm .command.hidden .input {\\n  max-width: 1px;\\n}\\n\\n.WebTerm .command .input {\\n  background-color: transparent;\\n  border: none;\\n  color: inherit;\\n  font: inherit;\\n  flex: 1;\\n  margin: 0;\\n  outline: none;\\n  padding: 0;\\n  padding-top: 7px;\\n}\\n\\n.WebTerm .command .spinner:before {\\n  display: inline-block;\\n  content: \\\"\\\\280B\\\";\\n  animation: spin 1s linear infinite;\\n  vertical-align: middle;\\n  margin-right: 10px;\\n}\\n\\n@keyframes spin {\\n  0% {\\n    content: \\\"\\\\280B\\\";\\n  }\\n  10% {\\n    content: \\\"\\\\2819\\\";\\n  }\\n  20% {\\n    content: \\\"\\\\2839\\\";\\n  }\\n  30% {\\n    content: \\\"\\\\2838\\\";\\n  }\\n  40% {\\n    content: \\\"\\\\283C\\\";\\n  }\\n  50% {\\n    content: \\\"\\\\2834\\\";\\n  }\\n  60% {\\n    content: \\\"\\\\2826\\\";\\n  }\\n  70% {\\n    content: \\\"\\\\2827\\\";\\n  }\\n  80% {\\n    content: \\\"\\\\2807\\\";\\n  }\\n  90% {\\n    content: \\\"\\\\280F\\\";\\n  }\\n}\\n\\n/* Background color classes - with higher specificity to override theme colors */\\n.WebTerm output .bg-black { background-color: #000000; }\\n.WebTerm output .bg-red { background-color: #ff0000; }\\n.WebTerm output .bg-green { background-color: #00ff00; }\\n.WebTerm output .bg-yellow { background-color: #ffff00; }\\n.WebTerm output .bg-blue { background-color: #0000ff; }\\n.WebTerm output .bg-magenta { background-color: #ff00ff; }\\n.WebTerm output .bg-cyan { background-color: #00ffff; }\\n.WebTerm output .bg-white { background-color: #ffffff; }\\n.WebTerm output .bg-bright-black { background-color: #808080; }\\n.WebTerm output .bg-bright-red { background-color: #ff8080; }\\n.WebTerm output .bg-bright-green { background-color: #80ff80; }\\n.WebTerm output .bg-bright-yellow { background-color: #ffff80; }\\n.WebTerm output .bg-bright-blue { background-color: #8080ff; }\\n.WebTerm output .bg-bright-magenta { background-color: #ff80ff; }\\n.WebTerm output .bg-bright-cyan { background-color: #80ffff; }\\n.WebTerm output .bg-bright-white { background-color: #ffffff; }\\n\\n/* Text styling classes - with higher specificity to override theme styles */\\n.WebTerm output .bold { font-weight: bold; }\\n.WebTerm output .dim { opacity: 0.5; }\\n.WebTerm output .italic { font-style: italic; }\\n.WebTerm output .underline { text-decoration: underline; }\\n.WebTerm output .strikethrough { text-decoration: line-through; }\\n\", \"\"]);\n\n// exports\n\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/WebTerminal.css?./node_modules/css-loader/index.js");

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n//# sourceURL=webpack://@lvcabral/terminal/./node_modules/css-loader/lib/css-base.js?");

/***/ }),

/***/ "./src/WebTerminal.css":
/*!*****************************!*\
  !*** ./src/WebTerminal.css ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar content = __webpack_require__(/*! !!../node_modules/css-loader/index.js!./WebTerminal.css */ \"./node_modules/css-loader/index.js!./src/WebTerminal.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! !../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack://@lvcabral/terminal/./src/WebTerminal.css?");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL=webpack://@lvcabral/terminal/./node_modules/style-loader/lib/addStyles.js?");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n//# sourceURL=webpack://@lvcabral/terminal/./node_modules/style-loader/lib/urls.js?");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"name\":\"@lvcabral/terminal\",\"version\":\"1.1.0\",\"description\":\"A simple and lightweight Javascript web browser terminal\",\"keywords\":[\"terminal\",\"console\",\"xterm\",\"shell\",\"tool\"],\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/lvcabral/terminal.git\"},\"license\":\"MIT\",\"copyright\":\"© 2025, Marcelo Lv Cabral\",\"main\":\"./dist/web-terminal.js\",\"bin\":{\"terminal\":\"dist/web-terminal.js\"},\"files\":[\"dist\",\"package.json\"],\"homepage\":\"https://github.com/lvcabral/terminal\",\"bugs\":\"https://github.com/lvcabral/terminal/issues\",\"devDependencies\":{\"babel-eslint\":\"^9.0.0\",\"babel-jest\":\"^23.4.2\",\"babel-loader\":\"^7.1.0\",\"babel-plugin-transform-class-properties\":\"^6.24.1\",\"babel-polyfill\":\"^6.26.0\",\"babel-preset-env\":\"^1.7.0\",\"css-loader\":\"^1.0.0\",\"eslint\":\"^5.4.0\",\"eslint-config-airbnb\":\"^17.0.0\",\"eslint-plugin-import\":\"^2.13.0\",\"identity-obj-proxy\":\"^3.0.0\",\"jest\":\"^23.5.0\",\"style-loader\":\"^0.23.0\",\"webpack\":\"^5.75.0\",\"webpack-cli\":\"^5.0.1\"},\"scripts\":{\"build\":\"webpack\",\"start\":\"node index.js\",\"test\":\"jest\",\"lint\":\"eslint src/**\",\"release\":\"npm publish --tag latest --access public\"}}');\n\n//# sourceURL=webpack://@lvcabral/terminal/./package.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});